{
  "name": "autoprefixer",
  "version": "0.7.20130824",
  "description": "Parse CSS and add vendor prefixes to CSS rules using values from the Can I Use website",
  "keywords": [
    "css",
    "prefix",
    "rework"
  ],
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "license": "LGPL 3",
  "repository": {
    "type": "git",
    "url": "https://github.com/ai/autoprefixer.git"
  },
  "dependencies": {
    "css-parse": "~> 1.5.2",
    "css-stringify": "~> 1.3.1"
  },
  "devDependencies": {
    "coffee-script": "1.6.3",
    "component": "0.17.0",
    "fs-extra": "0.6.3",
    "should": "1.2.2",
    "stylus": "0.37.0",
    "rework": "0.17.4",
    "mocha": "1.12.0",
    "glob": "3.2.6",
    "nib": "1.0.1"
  },
  "bin": {
    "autoprefixer": "./bin/autoprefixer"
  },
  "main": "lib/autoprefixer",
  "scripts": {
    "test": "mocha --reporter spec --require should --compilers coffee:coffee-script"
  },
  "readme": "# Autoprefixer\n\n<img align=\"right\" width=\"94\" src=\"http://ai.github.io/autoprefixer/logo.svg\">\n\nParse CSS and add vendor prefixes to CSS rules using values\nfrom the [Can I Use](http://caniuse.com/).\n\nWrite your CSS rules without vendor prefixes (in fact, forget about them\nentirely):\n\n```js\nvar css = 'a { transition: transform 1s }';\nvar prefixed = autoprefixer.compile(css);\n```\n\nAutoprefixer uses the data on current browser popularity\nand properties support to apply prefixes for you:\n\n```css\na {\n  -webkit-transition: -webkit-transform 1s;\n  transition: -ms-transform 1s;\n  transition: transform 1s\n}\n```\n\nTwitter account for news and releases:\n[@autoprefixer](https://twitter.com/autoprefixer).\n\nSponsored by [Evil Martians](http://evilmartians.com/).\n\n## Translations\n\nДокументация на русском: [habrahabr.ru/company/evilmartians/blog/176909](http://habrahabr.ru/company/evilmartians/blog/176909/)\n\n## Features\n\n### Forget about prefixes\n\nThe best tool is a tool you can't see that does the work for you.\nThis is the main idea behind Autoprefixer.\n\nAutoprefixer interface is simple: just forget about vendor prefixes\nand write normal CSS according to latest W3C specs. You don’t need\na special language (like Sass) or special mixins.\n\nBecause Autoprefixer is a postprocessor for CSS,\nyou can also use it with preprocessors, such as Sass, Stylus or LESS.\n\n### Actual data from Can I Use\n\nAutoprefixer uses the most recent data from [Can I Use](http://caniuse.com/),\nunderstands which browsers are actual and popular and adds only the necessary\nvendor prefixes.\n\nIt also cleans your CSS from old prefixes (like prefixed `border-radius`,\nproduced by many CSS libraries):\n\n```css\na {\n  -webkit-border-radius: 5px;\n  border-radius: 5px\n}\n```\n\ncompiles to:\n\n```css\na {\n  border-radius: 5px\n}\n```\n\n### Fast\n\nAutoprefixer is about 50 times faster than Compass and 10 times faster\nthan Stylus.\n\nOn a Core i7 with 10 GB of RAM and SSD, benchmark with GitHub styles is:\n\n```\n~/Dev/autoprefixer$ ./node_modules/.bin/cake bench\nLoad GitHub styles\nAutoprefixer: 257 ms\nCompass:      13626 ms (53.0 times slower)\nRework:       213 ms   (1.2 times faster)\nStylus:       2596 ms  (10.1 times slower)\n```\n\nUnlike -prefix-free, Autoprefixer compiles CSS once on deploy and doesn’t hit\nclient-side performance.\n\n### Rewrite syntax\n\nFlexbox or gradients have different syntaxes in different browsers\n(sometimes you need to recalculate angles, sometimes you need 2 old properties\ninstead of new one), but Autoprefixer hides this from you.\n\nJust code by latest W3C specs and Autoprefixer will produce the code\nfor old browsers:\n\n```css\na {\n  display: flex;\n}\n```\n\ncompiles to:\n\n```css\na {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: flex\n}\n```\n\n## Browsers\n\nYou can specify the browsers you want to target in your project\n(by default, it’s `last 2 versions`):\n\n```js\nautoprefixer(\"last 1 version\", \"> 1%\", \"ie 8\", \"ie 7\").compile(css);\n```\n\n* `last n versions` is last versions for each browser. Like “last 2 versions”\n  [strategy](http://support.google.com/a/bin/answer.py?answer=33864) in\n  Google.\n* `> n%` is browser versions, selected by global usage statistics.\n* `ff > 20` and `ff >= 20` is Firefox versions newer, that 20.\n* `none` don’t set any browsers to clean CSS from any vendor prefixes.\n* You can also set browsers directly.\n\nBlackberry and stock Android browsers will not be used in `last n versions`.\nYou can add them by name:\n\n```js\nautoprefixer(\"last 1 version\", \"bb 10\", \"android 4\").compile(css);\n```\n\nBrowsers names are:\n\nYou can get browsers codenames in\n[data file](https://github.com/ai/autoprefixer/blob/master/data/browsers.coffee):\n* `android` for old Android stock browser.\n* `bb` for Blackberry browser.\n* `chrome` for Google Chrome.\n* `ff` for Mozilla Firefox.\n* `ie` for Internet Explorer.\n* `ios` for iOS Safari.\n* `opera` for Opera.\n* `safari` for desktop Safari.\n\n## Inspect\n\nYou can check which browsers are selected and which properties will be prefixed:\n\n```js\ninspect = autoprefixer(\"last 1 version\").inspect();\nconsole.log(inspect);\n```\n\n## Usage\n\n### Ruby on Rails\n\nAdd [autoprefixer-rails](https://github.com/ai/autoprefixer-rails) gem\nto `Gemfile` and write CSS in a usual way:\n\n```ruby\ngem \"autoprefixer-rails\"\n```\n\n### Middleman\n\nAdd [middleman-autoprefixer](https://github.com/porada/middleman-autoprefixer)\ngem to `Gemfile`:\n\n```ruby\ngem \"middleman-autoprefixer\"\n```\n\nand activate the extension in your project’s `config.rb`:\n\n```ruby\nactivate :autoprefixer\n```\n\n### Ruby\n\nYou can integrate Autoprefixer into your Sprockets environment\nby `autoprefixer-rails` gem:\n\n```ruby\nAutoprefixerRails.install(sprockets_env)\n```\n\nor process CSS from plain Ruby:\n\n```ruby\nprefixed = AutoprefixerRails.compile(css)\n```\n\n### Grunt\n\nYou can use the\n[grunt-autoprefixer](https://github.com/nDmitry/grunt-autoprefixer)\nplugin for Grunt. Install the npm package and add it to Gruntfile:\n\n```js\ngrunt.loadNpmTasks('grunt-autoprefixer');\n```\n\nIf you use Sass with `compress` output style and worry, that Autoprefixer\nuncompress CSS, try [csso-grunt](https://github.com/t32k/grunt-csso).\nIt compress CSS back, but did it much better than Sass.\n\n### Prepros\n\nI you want to build your assets in GUI, try\n[Prepros](http://alphapixels.com/prepros/). Just set “Auto Prefix CSS”\n[checkbox](https://f.cloud.github.com/assets/3478693/930798/faa29892-0016-11e3-8901-87850de7aed2.jpg)\nin right panel.\n\n### Compass\n\nIf you use Compass binary to compile your styles, you can easy integrate\nAutoprefixer with it. Install `autoprefixer-rails` gem:\n\n```\ngem install autoprefixer-rails csso-rails\n```\n\nand add post-compile hook to `config.rb`:\n\n```ruby\nrequire 'autoprefixer-rails'\nrequire 'csso'\n\non_stylesheet_saved do |file|\n  css = File.read(file)\n  File.open(file, 'w') do |io|\n    io << Csso.optimize( AutoprefixerRails.compile(css) )\n  end\nend\n```\n\nIf you use `compress` output style, Autoprefixer will uncompress CSS.\nFor this reason, we use [csso-rails](https://github.com/Vasfed/csso-rails)\nto compress CSS back (it compress much better than Sass).\n\nIf you need uncompressed CSS, remove `Csso.optimize` method call.\n\nYou can set browsers array as second argument in `AutoprefixerRails.compile`.\n\n### Mincer\n\nTo use Autoprefixer in [Mincer](https://github.com/nodeca/mincer),\ninstall `autoprefixer` npm package and enable it:\n\n```js\nenvironment.enable(\"autoprefixer\");\n```\n\n### Node.js\n\nUse `autoprefixer` npm package:\n\n```js\nvar autoprefixer = require('autoprefixer');\nvar prefixed     = autoprefixer.compile(css);\n```\n\n### JavaScript\n\nYou can use Autoprefixer in the browser or a non-Node.js runtime\nwith [standalone version](https://raw.github.com/ai/autoprefixer-rails/master/vendor/autoprefixer.js).\n\n### Rework\n\nAutoprefixer can be also used as a\n[Rework](https://github.com/visionmedia/rework)\nfilter, so you can combine it with other filters:\n\n```js\nrework(css).\n    use( autoprefixer(['> 1%', 'opera 12.5']).rework ).\n    use( rework.references() ).\n    toString();\n```\n\n### Sublime Text\n\nYou can process your styles directly in Sublime Text with the\n[sublime-autoprefixer](https://github.com/sindresorhus/sublime-autoprefixer)\nplugin.\n\n\n### Others\n\nYou can use the `autoprefixer` binary to process CSS files using\nany assets manager:\n\n```\nsudo npm install --global autoprefixer\nautoprefixer *.css\n```\n\nSee `autoprefixer -h` for help.\n\n## In-package Update\n\nI highly recommend to always have latest version of Autoprefixer.\nBut, some company has long test period before any libraries updater.\nFor this cases, you can update Can I Use data inside npm package:\n\n```\nautoprefixer --update\n```\n\nNote, that in-package update doesn’t get new properties or code fixes. It update\nonly browsers popularity and propeties support in new browsers versions.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ai/autoprefixer/issues"
  },
  "_id": "autoprefixer@0.7.20130824",
  "_from": "autoprefixer@~0.7"
}
